[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling",
]

[project]
name = "mcr-analyzer"
description = "Analyze and manage MCR measurements"
readme = "README.rst"
license = { file = "LICENSE" }
authors = [
  { name = "Martin Knopp", email = "Martin.Knopp@tum.de" },
]
requires-python = "==3.11.*"
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Private :: Do Not Upload",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
]
dynamic = [
  "version",
]
dependencies = [
  "numpy",         # cSpell:ignore numpy
  "opencv-python", # cSpell:ignore opencv
  "pandas",
  "pyqt6",
  "pytz",          # cSpell:ignore pytz
  "returns",
  "scipy",         # cSpell:ignore scipy
  "sqlalchemy",
]
optional-dependencies.dev = [
  "coverage",
  "coverage-badge",
  "hatch",
  "hypothesis",
  "mypy",
  "pip-tools",
  "pooch",
  "pre-commit",
  "pytest",
  "pytest-cov",
  "pytest-qt",
  "pytest-sugar",
  "ruff",
  "scalene",
]
gui-scripts.mcr_analyzer = "mcr_analyzer.__main__:main"

[tool.hatch.version]
path = "src/mcr_analyzer/__about__.py"

[tool.hatch.envs.default.scripts]
pip_install__editable = "pip install --editable=."
mcr_analyzer = "python -m mcr_analyzer"

[tool.ruff]
line-length = 120
namespace-packages = [
  "docs",
]
src = [
  "src",
]
preview = true

show-fixes = true
format.preview = true
format.skip-magic-trailing-comma = true
format.docstring-code-format = true
lint.select = [
  #"A",     # - flake8-builtins # cSpell:ignore builtins
  "AIR", # - Airflow
  #"ANN",   # - flake8-annotations
  "ARG",   # - flake8-unused-arguments
  "ASYNC", # - flake8-async
  "B",     # - flake8-bugbear
  "BLE",   # - flake8-blind-except
  "C4",    # - flake8-comprehensions
  "C90",   # - mccabe # cSpell:ignore mccabe
  "COM",   # - flake8-commas
  #"CPY",   # - flake8-copyright
  #"D",     # - pydocstyle # cSpell:ignore pydocstyle
  "DJ",   # - flake8-django
  "DTZ",  # - flake8-datetimez # cSpell:ignore datetimez
  "E",    # - pycodestyle - Error # cSpell:ignore pycodestyle
  "EM",   # - flake8-errmsg # cSpell:ignore errmsg
  "ERA",  # - eradicate
  "EXE",  # - flake8-executable
  "F",    # - Pyflakes # cSpell:ignore Pyflakes
  "FA",   # - flake8-future-annotations
  "FBT",  # - flake8-boolean-trap
  "FIX",  # - flake8-fixme
  "FLY",  # - flynt # cSpell:ignore flynt
  "FURB", # - refurb # cSpell:ignore FURB refurb
  "G",    # - flake8-logging-format
  "I",    # - isort # cSpell:ignore isort
  "ICN",  # - flake8-import-conventions
  "INP",  # - flake8-no-pep420
  "INT",  # - flake8-gettext # cSpell:ignore gettext
  "ISC",  # - flake8-implicit-str-concat # cSpell:ignore concat
  "LOG",  # - flake8-logging
  "N",    # - pep8-naming
  "NPY",  # - NumPy-specific rules
  "PD",   # - pandas-vet
  "PERF", # - Perflint # cSpell:ignore Perflint
  "PGH",  # - pygrep-hooks # cSpell:ignore pygrep
  "PIE",  # - flake8-pie
  "PL",   # - Pylint
  "PT",   # - flake8-pytest-style
  "PTH",  # - flake8-use-pathlib # cSpell:ignore pathlib
  "PYI",  # - flake8-pyi
  "Q",    # - flake8-quotes
  "RET",  # - flake8-return
  "RSE",  # - flake8-raise
  "RUF",  # - Ruff-specific rules
  "S",    # - flake8-bandit
  "SIM",  # - flake8-simplify
  "SLF",  # - flake8-self
  "SLOT", # - flake8-slots
  "T10",  # - flake8-debugger
  "T20",  # - flake8-print
  "TCH",  # - flake8-type-checking
  "TD",   # - flake8-todos # cSpell:ignore todos
  "TID",  # - flake8-tidy-imports
  "TRY",  # - tryceratops # cSpell:ignore tryceratops
  "UP",   # - pyupgrade # cSpell:ignore pyupgrade
  "W",    # - pycodestyle - Warning
  "YTT",  # - flake8-2020
]
lint.ignore = [
  "COM812",  # - missing-trailing-comma
  "E203",    # - whitespace-before-punctuation
  "FBT003",  # - boolean-positional-value-in-call - "arg__1" in "QtWidgets.QWidget.setDisabled(arg__1)"
  "ISC001",  # - single-line-implicit-string-concatenation
  "PLC1901", # - compare-to-empty-string - High false positive rate
]
lint.per-file-ignores."tests/*" = [
  "PLR6301", # - no-self-use
  "S101",    # - assert
]
lint.unfixable = [
  # cSpell:ignore unfixable
  "ERA", # - eradicate
]
lint.flake8-bugbear.extend-immutable-calls = [
  "PyQt6.QtCore.QModelIndex", # - Allow default arguments like "parent: QModelIndex = QModelIndex()".
]
lint.flake8-tidy-imports.ban-relative-imports = "all"
# - Add quotes around type annotations, if doing so would allow an import to be moved into a type-checking block.
lint.flake8-type-checking.quote-annotations = true
lint.isort.known-first-party = [
  "mcr_analyzer",
]
# - warning: The isort option `isort.split-on-trailing-comma` is incompatible with the formatter `format.skip-magic-trailing-comma=true` option.
lint.isort.split-on-trailing-comma = false
lint.pydocstyle.convention = "google"

[tool.pyproject-fmt] # cSpell:ignore pyproject
align_comments = false
allowed_blank_lines = 1
array_auto_collapse = false
array_trailing_comma = true

[tool.pytest.ini_options]
minversion = "7" # cSpell:ignore minversion
pythonpath = "src" # cSpell:ignore pythonpath
testpaths = [ # cSpell:ignore testpaths
  "tests",
]

log_cli_level = "INFO"
xfail_strict = true # cSpell:ignore xfail
filterwarnings = [ # cSpell:ignore filterwarnings
  "error",
]

addopts = [
  "-ra",
  "--strict-config",
  "--strict-markers",

  # - https://docs.pytest.org/en/stable/explanation/goodpractices.html#tests-outside-application-code
  #
  # - 2024-05-07
  #   - Fall back to the default import mode `prepend`.
  #   - Because the import mode `importlib` reduces the useful debugging information pytest provides, such as left-right comparisons.
  #
  #"--import-mode=importlib", # cSpell:ignore addopts importlib

  "--cov=src",

  "--capture=no",
]

# - For "pytest-qt"
#   - https://pytest-qt.readthedocs.io/en/latest/intro.html#requirements
qt_api = "pyqt6" # cSpell:ignore pyqt

[tool.mypy] # cSpell:ignore mypy
warn_unreachable = true
enable_error_code = [
  "ignore-without-code",
  "redundant-expr",
  "truthy-bool",
]

strict = true
ignore_missing_imports = false

plugins = [
  # - https://returns.readthedocs.io/en/latest/pages/contrib/mypy_plugins.html
  "returns.contrib.mypy.returns_plugin",
]

[[tool.mypy.overrides]]
module = [
  "pooch.*",
  "pytestqt.*", # cSpell:ignore pytestqt
  "scipy.*",
]
ignore_missing_imports = true

[tool.pre-commit-update]
dry_run = true
exclude = [
  "blacken-docs",            # - 2023-09-26 "pre-commit-update" "v0.0.9": Cannot recognize a tag name pattern change (for example: "blacken-docs" "v1.12.1" -> "1.16.0"
  "conventional-pre-commit", # - 2023-10-24 - v2.4.0 -> v2.4.0-pre
]
