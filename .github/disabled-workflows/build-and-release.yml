name: Build and Release

env:
  PYTHON_VERSION: "3.10"
  UPX_VERSION: "3.96"

on:
  push:
    tags:
      - "*"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            build/
            upx-${{ env.UPX_VERSION }}-win64.zip
          key: ${{ runner.os }}-pyinstaller
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: syphar/restore-virtualenv@v1
        with:
          requirement_files: |
            **/setup.cfg
            **/requirements*.txt
            **/requirements/*.txt
            **/Pipfile.lock
            **/poetry.lock
      - name: Setup UPX ${{ env.UPX_VERSION }}
        run: |
          if (!(Test-Path "upx-${{ env.UPX_VERSION }}-win64.zip")) { Write-Host "Downloading UPX ${{ env.UPX_VERSION }}..." ; Invoke-WebRequest -Method Get -Uri "https://github.com/upx/upx/releases/download/v${{ env.UPX_VERSION }}/upx-${{ env.UPX_VERSION }}-win64.zip" -OutFile "upx-${{ env.UPX_VERSION }}-win64.zip" } else { Write-Host "Found cached UPX ${{ env.UPX_VERSION }}." }
          Expand-Archive -Path "upx-${{ env.UPX_VERSION }}-win64.zip" -DestinationPath .
          Copy-Item "upx-${{ env.UPX_VERSION }}-win64/upx.exe" "${env:SystemRoot}/system32"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller PySide6 .
      - name: Build application
        run: |
          pyinstaller -F -w analyser.py
      - name: Determine version number
        id: create-version
        run: |
          $RELEASE_VERSION = (${env:GITHUB_REF_NAME}).Trim("v", " ")
          Move-Item ./dist/analyser.exe ./dist/analyser-${RELEASE_VERSION}.exe
      - name: Archive binaries
        uses: actions/upload-artifact@v3
        with:
          name: analyser-win64
          path: dist/*.exe

  release:
    runs-on: ubuntu-latest
    needs:
      - build-windows
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - uses: actions/download-artifact@v3
        with:
          name: analyser-win64
          path: artifacts/
      - name: Determine version number
        id: create-version
        run: echo "::set-output name=RELEASE_VERSION::${GITHUB_REF_NAME#v}"
      - name: Extract tag annotation
        run:
          git tag -l --format='%(contents)' "${GITHUB_REF_NAME}" > changes-${{
          steps.create-version.outputs.RELEASE_VERSION }}.txt
      - uses: softprops/action-gh-release@v1
        with:
          name: MCR-Analyser ${{ steps.create-version.outputs.RELEASE_VERSION }}
          draft: true
          prerelease: true
          body_path: changes-${{ steps.create-version.outputs.RELEASE_VERSION }}.txt
          files: artifacts/*
