include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

stages:
  - test
  - deploy
  - release

variables:
  UPX_VERSION: "3.96"

.job_template:
  image: "python:latest"
  cache:
    paths:
      - venv/
  before_script:
    - apt-get update || true
    - apt-get dist-upgrade -y || true
    - python -m venv venv || true
    - source venv/bin/activate || true

flake8:
  extends: .job_template
  stage: test
  script:
    - pip install .[tests]
    - flake8
      --count
      --show-source
      --statistics
      --max-line-length=120
      --builtins=_
      --ignore=E121,E123,E126,E203,E226,E24,E704,W503,W504
      mcr_analyser
  tags:
    - docker

pylint:
  extends: .job_template
  stage: test
  script:
    - pip install .[tests]
    - pylint
      -d all
      -e F
      -e E
      -e unreachable
      -e duplicate-key
      -e unnecessary-semicolon
      -e global-variable-not-assigned
      -e unused-variable
      -e binary-op-exception
      -e bad-format-string
      -e anomalous-backslash-in-string
      -e bad-open-mode
      --ignored-modules=qtpy
      mcr_analyser
  tags:
    - docker

pytest:
  extends: .job_template
  stage: test
  script:
    - pip install .[tests]
    - coverage run --source=mcr_analyser,tests -m pytest tests
    - coverage report
    - coverage xml
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  tags:
    - docker

pages:
  extends: .job_template
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  script:
    - pip install .[doc]
    - sphinx-build -b html doc public
  artifacts:
    paths:
      - public
  tags:
    - docker

build-windows:
  extends: .job_template
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  cache:
    paths:
      - build/
      - upx-$env:UPX_VERSION-win64.zip
      - venv/
  before_script:
    - if (!(Test-Path "upx-${env:UPX_VERSION}-win64.zip")) { Write-Host "Downloading UPX ${env:UPX_VERSION}..." ; Invoke-WebRequest -Method Get -Uri "https://github.com/upx/upx/releases/download/v${env:UPX_VERSION}/upx-${env:UPX_VERSION}-win64.zip" -OutFile "upx-${env:UPX_VERSION}-win64.zip" } else { Write-Host "Found cached UPX ${env:UPX_VERSION}." }
    - Expand-Archive -Path "upx-${env:UPX_VERSION}-win64.zip" -DestinationPath .
    - Copy-Item "${env:CI_PROJECT_DIR}/upx-${env:UPX_VERSION}-win64/upx.exe" "${env:SystemRoot}/system32"
    - python -m venv venv
    - venv/Scripts/activate
  script:
    - pip install
      pyinstaller
      PySide6
      .
    - pyinstaller -F -w analyser.py
    - $RELEASE_VERSION = (${env:CI_COMMIT_TAG}).Trim("v", " ")
    - Write-Host "Uploading binary as version ${RELEASE_VERSION}..."
    - Invoke-RestMethod -Headers @{"JOB-TOKEN" = "${env:CI_JOB_TOKEN}"} -Method Put -Uri "${env:CI_API_V4_URL}/projects/${env:CI_PROJECT_ID}/packages/generic/${env:CI_PROJECT_NAME}/${RELEASE_VERSION}/analyser-${RELEASE_VERSION}.exe" -InFile "dist/analyser.exe"
  artifacts:
    name: "mcr-analyser-win64"
    paths:
      - dist/
  tags:
    - windows

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - release-cli create
      --name "MCR-Analyser ${CI_COMMIT_TAG#v}"
      --description "${CI_COMMIT_DESCRIPTION}"
      --tag-name ${CI_COMMIT_TAG}
      --assets-link "{\"name\":\"analyser-${CI_COMMIT_TAG#v}.exe\",\"url\":\"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG#v}/analyser-${CI_COMMIT_TAG#v}.exe\",\"link_type\":\"package\"}"
